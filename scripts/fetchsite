#!/usr/bin/env bash
#
#	fetchsite [-b branch] [-g hugo-bin] [-l lock-file] [-o output-dir] [-r repo-url] [-u base-url] repo-dir
#
# Fetches the latest version of the website source from the GitHub
# remote (or the Git URL given in the -r option) to the directory
# given in the first argument, checks out the master branch (or the
# branch given by the -b option), builds the site with the localhost
# base URL (or the URL given by the -u option), using the Hugo
# executable at /usr/bin/hugo (or the executable given by the -g
# option), and saving the resulting files into the /var/www/iasl
# directory (or the directory given by the -o option). The -l option
# specifies the path to use for the lock file.

. "$(dirname "$0")"/libusage.bash
usage='[-b branch] [-g hugo-bin] [-l lock-file] [-o output-dir] [-r repo-url] [-u base-url] repo-dir'

branch=master
repourl='git://github.com/uci-iasl/website.git'
wwwdir='/var/www/iasl'
baseurl='http://localhost/'
lockfile=
hugobin='/usr/bin/hugo'

while getopts ':b:g:l:o:r:u:' opt; do
	case $opt in
	(b)	branch="$OPTARG";;
	(g)	hugobin="$OPTARG";;
	(l)	lockfile="$OPTARG";;
	(o)	wwwdir="$OPTARG";;
	(r)	repourl="$OPTARG";;
	(u)	baseurl="$OPTARG";;
	(*)	usagebadopt "$opt";;
	esac
done
shift $((OPTIND-1)); [[ $1 == -- ]] && shift

[[ $# -gt 0 ]] || usage 'no repository directory given'
repodir="$1"
[[ ! -e $repodir || -d $repodir ]] || panic "$repodir: file exists and is not a directory"

lockfile=
cleanup() { [[ -n $lockfile ]] && rm "$lockfile"; }
trap cleanup EXIT

[[ -n $lockfile ]] || lockfile="$HOME/.$argv0.lock"
[[ -f $lockfile ]] && panic "$lockfile: lock file exists; another fetching process must be in progress"
echo $$ >"$lockfile" || panic "$lockfile: writing to lock file failed"

hugobin="$(abspath "$hugobin")"
wwwdir="$(abspath "$wwwdir")"

if [[ -d $repodir ]]; then
	log "fetching commits in branch '$branch' from the origin"
	gitd() { git --git-dir="$repodir"/.git --work-tree="$repodir" "$@"; }
	gitd remote set-branches origin "$branch" &&
	gitd fetch origin "$branch" &&
	gitd checkout "$branch" &&
	localhash="$(gitd rev-parse @)" &&
	remotehash="$(gitd rev-parse @{u})" &&
	[[ "$localhash" != "$remotehash" ]] && {
		log "pulling changes in branch '$branch' from the origin"
		gitd reset --hard origin/"$branch" &&
		gitd pull origin "$branch"
	}
else
	log "cloning branch '$branch' from '$repourl'"
	git clone -b "$branch" --single-branch "$repourl" "$repodir"
fi && (
	log "building the website into directory '$wwwdir'"
	cd "$repodir" &&
	"$hugobin" -d "$wwwdir" --cleanDestinationDir -b "$baseurl" --minify
)
