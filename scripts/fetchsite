#!/usr/bin/env bash
#
#	fetchsite [-b branch] [-g hugo-bin] [-l lock-file] [-o output-dir] [-r repo-url] [-u base-url] repo-dir
#
# Fetches the latest version of the website source from the GitHub
# remote (or the Git URL given in the -r option) to the directory
# given in the only argument, checks out the latest state of the
# 'release' branch (or the branch given by the -b option) from the
# origin, builds the site with the base URL from its configuration
# file (or the URL given by the -u option), using the first Hugo
# executable found in $PATH (or using the executable given by the
# -g option), and saving the resulting files into the /var/www/iasl
# directory (or the directory given by the -o option). The -l option
# specifies the path to use for the lock file.

. "$(dirname "$0")"/libusage.bash
usage='[-b branch] [-g hugo-bin] [-l lock-file] [-o output-dir] [-r repo-url] [-u base-url] repo-dir'

branch=release
repourl='git://github.com/uci-iasl/website.git'
wwwdir='/var/www/iasl'
baseurl=
lockfile=
hugobin=hugo

while getopts ':b:g:l:o:r:u:' opt; do
	case $opt in
	(b)	branch="$OPTARG";;
	(g)	hugobin="$OPTARG";;
	(l)	lockfile="$OPTARG";;
	(o)	wwwdir="$OPTARG";;
	(r)	repourl="$OPTARG";;
	(u)	baseurl="$OPTARG";;
	(*)	usagebadopt "$opt";;
	esac
done
shift $((OPTIND-1)); [[ $1 == -- ]] && shift

[[ $# -gt 0 ]] || usage 'no repository directory given'
repodir="$1"
[[ ! -e $repodir || -d $repodir ]] || panic "$repodir: file exists and is not a directory"

lockfile=
cleanup() { [[ -n $lockfile ]] && rm "$lockfile"; }
trap cleanup EXIT

[[ -n $lockfile ]] || lockfile="$HOME/.$argv0.lock"
[[ -f $lockfile ]] && panic "$lockfile: lock file exists; another fetching process must be in progress"
echo $$ >"$lockfile" || panic "$lockfile: writing to lock file failed"

hugobinpath="$(which "$hugobin")" || panic "$hugobin: Hugo executable does not exist nor can be found in \$PATH"
hugobinpath="$(abspath "$hugobinpath")"
wwwdirpath="$(abspath "$wwwdir")"

if [[ -d $repodir ]]; then
	log "fetching commits in branch '$branch' from the origin"
	gitd() { git --git-dir="$repodir"/.git --work-tree="$repodir" "$@"; }
	localhash="$(gitd rev-parse '@')" &&
	gitd remote set-branches origin "$branch" &&
	gitd fetch --depth=1 origin "$branch" &&
	gitd checkout "$branch" &&
	remotehash="$(gitd rev-parse '@{u}')" &&
	[[ "$localhash" != "$remotehash" ]] && {
		log "pulling changes in branch '$branch' from the origin"
		gitd reset --hard origin/"$branch" &&
		gitd pull --depth=1 origin "$branch"
	}
else
	log "cloning branch '$branch' from '$repourl'"
	git clone --depth=1 --branch="$branch" "$repourl" "$repodir"
fi && (
	log "building the website into directory '$wwwdirpath' using Hugo executable '$hugobinpath'"
	cd "$repodir" &&
	"$hugobinpath" --destination="$wwwdirpath" --cleanDestinationDir "${baseurl:+--baseURL="$baseurl"}" --minify
)
