#!/usr/bin/env bash
#
#	gethugo [-v version] [install-path]
#
# Downloads the archive with the latest released version of the Hugo
# binary (or the version given via the -v option) from the official
# repository on GitHub, and extracts it into the directory given in
# the only argument (or the current working directory, if missing).

. "$(dirname "$0")"/libusage.bash
usage='[-v version] [install-path]'

version=

while getopts ':v:' opt; do
	case $opt in
	(v)	version="$OPTARG";;
	(*)	usagebadopt "$opt";;
	esac
done
shift $((OPTIND-1)); [[ $1 == -- ]] && shift

binpath="${1:-.}"
[[ -d $binpath ]] || panic "$binpath: directory does not exist"

if [[ -z $version ]]; then
	version="$(
		curl -s 'https://api.github.com/repos/gohugoio/hugo/releases/latest' |
		sed -n 's/.*"tag_name": *"v\([^"]\{1,\}\)".*/\1/p'
	)"
	[[ -n $version ]] || panic 'failed to determine the latest version'
fi

case $OSTYPE in
(linux*)	ossuffix=Linux;;
(darwin*)	ossuffix=macOS;;
(*)	panic "$OSTYPE: unsupported platform"
esac

arch="$(uname -m)"
case $arch in
(x86_64)	archsuffix=64bit;;
(i386|i686)	archsuffix=32bit;;
(armv8*|aarch64*)	archsuffix=ARM64;;
(arm*)	archsuffix=ARM;;
(*)	panic "$arch: unsupported machine hardware name"
esac

build="hugo_${version}_${ossuffix}-${archsuffix}"
dlurl="https://github.com/gohugoio/hugo/releases/download/v$version/$build.tar.gz"

archive=
cleanup() { [[ -n $archive ]] && rm "$archive"; }
trap cleanup EXIT
archive="$(mktemp)" || exit

log "attempting to download Hugo version '$version' from '$dlurl'"
curl -o "$archive" -L "$dlurl" &&
tar -xzf "$archive" -C "$binpath" hugo
