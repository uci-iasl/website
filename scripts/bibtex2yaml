#!/usr/bin/env python3

import argparse
import bibtexparser
import codecs
import enum
import latexcodec
import re
import sys
import titlecase
import yaml

from bibtexparser.bibdatabase import as_text as bib_expr_as_text

BIBTEX_STANDARD_TAGS = (
	'author',
	'title',
	'editor',
	'journal',
	'booktitle',
	'chapter',
	'volume',
	'number',
	'edition',
	'series',
	'pages',
	'howpublished',
	'type',
	'note',
	'school',
	'institution',
	'organization',
	'publisher',
	'address',
	'day',
	'month',
	'year',
)
BIBTEX_NAMELIST_TAGS = {'author', 'editor'}
BIBTEX_TITLECASE_TAGS = {
	'title',
	'journal',
	'booktitle',
	'series',
	'howpublished',
	'school',
	'institution',
	'organization',
	'publisher',
}
BIBTEX_SENTENCECASE_TAGS = {'title'}
BIBTEX_SNIPPET_KEEP_VARS_TAGS = {
	'month',
}
MONTH_SHORT_NAMES = (
	None,
	'jan', 'feb', 'mar', 'apr',
	'may', 'jun', 'jul', 'aug',
	'sep', 'oct', 'nov', 'dec',
)

assert BIBTEX_NAMELIST_TAGS.issubset(BIBTEX_STANDARD_TAGS)
assert BIBTEX_TITLECASE_TAGS.issubset(BIBTEX_STANDARD_TAGS)
assert BIBTEX_SENTENCECASE_TAGS.issubset(BIBTEX_TITLECASE_TAGS)
assert BIBTEX_SNIPPET_KEEP_VARS_TAGS.issubset(BIBTEX_STANDARD_TAGS)

class CaseChange(enum.Enum):
	title = 'title'
	sentence = 'sentence'

	def __str__(self):
		return self.value

def detexify(s):
	s = codecs.decode(s, 'ulatex')
	s = s.replace('\n', ' ')
	s = re.sub(r'\s+', ' ', s)
	return s.strip()

def debrace(s):
	s = re.sub(r'(?<!\\)([{}])', '', s)
	s = re.sub(r'\\([{}])', r'\1', s)
	return s

def title_text(s, title_case=True):
	def ignore_braced(word, **kwargs):
		starts_with_brace = word[0] == '{'
		word = debrace(word)
		# Empty string is treated by titlecase() the same way as None,
		# so if the word consists of braces only, return a space.
		if not word: return ' '
		return word if starts_with_brace else None
	if title_case:
		s = titlecase.titlecase(s, callback=ignore_braced)
	else:
		s = ' '.join(ignore_braced(w) or
				(w.capitalize() if i == 0 else w[:1].lower() + w[1:])
			for i, w in enumerate(s.split()))
	s = debrace(s)
	s = re.sub(r'\s+', ' ', s)
	return s.strip()

def format_title(tag, text, case_change):
	if case_change == CaseChange.title:
		return title_text(text, True)
	if case_change == CaseChange.sentence:
		return title_text(text, tag not in BIBTEX_SENTENCECASE_TAGS)
	return debrace(text)

def format_bibtex(bib_entry):
	db = bibtexparser.bibdatabase.BibDatabase()
	db.entries = [{
		tag: val if tag in BIBTEX_SNIPPET_KEEP_VARS_TAGS else bib_expr_as_text(val)
		for tag, val in bib_entry.items()
	}]
	return bibtex_writer().write(db).rstrip('\n')

def break_names(names_str, case_change):
	records = []
	for name in names_str.split(' and '):
		parts = bibtexparser.customization.splitname(name, strict_mode=False)
		record = {
			'first': parts['first'][:1],
			'middle': parts['first'][1:],
			'last': parts['von'] + parts['last'],
			'suffix': parts['jr'],
		}
		record = {k: debrace(' '.join(v)) for k, v in record.items() if v}
		if all(k not in record for k in ('first', 'middle', 'suffix')):
			record['last'] = format_title('title', record['last'], case_change)
		records.append(record)
	return records

def make_record(bib_entry, include_bibtex, case_change):
	record = {
		'id': bib_entry['ID'],
		'kind': bib_entry['ENTRYTYPE'],
	}
	if include_bibtex:
		record['bibtex'] = format_bibtex(bib_entry)
	for tag in bib_entry:
		if tag in BIBTEX_STANDARD_TAGS:
			record[tag] = detexify(bib_expr_as_text(bib_entry[tag]))
			if tag in BIBTEX_NAMELIST_TAGS:
				record[tag] = break_names(record[tag], case_change)
			elif tag in BIBTEX_TITLECASE_TAGS:
				record[tag] = format_title(tag, record[tag], case_change)
			else:
				record[tag] = debrace(record[tag])
		elif tag not in ('ID', 'ENTRYTYPE'):
			record[tag] = bib_expr_as_text(bib_entry[tag])
	return record

def record_date_str(record):
	if 'year' not in record: return ''
	date = record['year']
	if 'month' not in record: return date

	month_match = re.search(r'[A-Za-z]{3}', record['month'])
	month_short = month_match.group().lower() if month_match else ''
	try: month_num = MONTH_SHORT_NAMES.index(month_short)
	except: return date
	date += '-{:02d}'.format(month_num)
	if 'day' not in record: return date

	try: day_num = int(record['day'])
	except: return date
	date += '-{:02d}'.format(day_num)
	return date

def load_bibtex(file):
	return bibtexparser.bparser.BibTexParser(
		common_strings=True,
		homogenize_fields=True,
		ignore_nonstandard_types=False,
		interpolate_strings=False,
	).parse_file(file, partial=True)

def save_yaml(records, file):
	yaml.dump(
		{'references': records},
		file,
		encoding='utf-8',
		allow_unicode=True,
		default_flow_style=False,
	)

def bibtex_writer():
	w = bibtexparser.bwriter.BibTexWriter()
	w.indent = '  '
	w.add_trailing_comma = True
	w.display_order = BIBTEX_STANDARD_TAGS
	w.order_entries_by = None
	return w

def save_bibtex(bib_db, file, id_sort_map=None, overwrite=False):
	if id_sort_map:
		bib_db.entries.sort(key=lambda e: id_sort_map.get(e['ID']))
	text = bibtex_writer().write(bib_db).rstrip('\n')
	if overwrite:
		file.seek(0)
		file.truncate()
	file.write(text)
	file.write('\n')

def convert_bibtex_file(bib_file, yaml_file, include_bibtex=False, case_change=None, reformat_source=True):
	bib_db = load_bibtex(bib_file)
	records = [make_record(e, include_bibtex, case_change) for e in bib_db.entries]
	records.sort(key=record_date_str, reverse=True)
	save_yaml(records, yaml_file)
	if reformat_source and bib_file.writable():
		id_ord = {r['id']: i for i, r in enumerate(records)}
		save_bibtex(bib_db, bib_file, id_sort_map=id_ord, overwrite=True)

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument(
		'bib_file',
		metavar='bib-file',
		type=argparse.FileType('r+'),
		default=sys.stdin,
		help='input BibTeX file to parse',
	)
	parser.add_argument(
		'yaml_file',
		metavar='yaml-file',
		nargs='?',
		type=argparse.FileType('w'),
		default=sys.stdout,
		help='output YAML file to write',
	)
	parser.add_argument(
		'-b',
		'--include-bibtex',
		action='store_true',
		default=False,
		help='save BibTeX source snippets in the output records',
	)
	parser.add_argument(
		'-c',
		'--change-case',
		type=CaseChange,
		choices=list(CaseChange),
		help='normalize word capitalization in title-like fields',
	)
	parser.add_argument(
		'-f',
		'--reformat-source',
		action='store_true',
		default=False,
		help='rewrite the input BibTeX file in canonical formatting',
	)
	return parser.parse_args()

if __name__ == '__main__':
	args = parse_args()
	with args.bib_file, args.yaml_file:
		convert_bibtex_file(
			args.bib_file,
			args.yaml_file,
			include_bibtex=args.include_bibtex,
			case_change=args.change_case,
			reformat_source=args.reformat_source,
		)
