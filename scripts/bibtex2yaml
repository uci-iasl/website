#!/usr/bin/env python3

import argparse
import bibtexparser
from collections import OrderedDict
import enum
from pylatexenc import latex2text, latexwalker
import re
import sys
import titlecase
import yaml

from bibtexparser.bibdatabase import as_text as bib_expr_as_text

# The BibTeX fields recognized by the standard bibliography styles.
# When a BibTeX entry is formatted, these fields are put in front in
# the same order as below. (Hence the tuple instead of a set.)
BIBTEX_STANDARD_TAGS = (
	'author',
	'title',
	'editor',
	'journal',
	'booktitle',
	'chapter',
	'volume',
	'number',
	'edition',
	'series',
	'pages',
	'howpublished',
	'type',
	'note',
	'school',
	'institution',
	'organization',
	'publisher',
	'address',
	'day',
	'month',
	'year',
)

# The BibTeX fields parsed as lists of names separated by the word
# 'and' (when occurring outside of expressions protected by braces).
BIBTEX_NAMELIST_TAGS = {
	'author',
	'editor',
}

# The BibTeX fields whose values are rewritten in title case when
# converted into text (if so requested at invocation). Fragments
# enclosed in braces are protected from case transformation.
BIBTEX_TITLECASE_TAGS = {
	'title',
	'journal',
	'booktitle',
	'series',
	'howpublished',
	'school',
	'institution',
	'organization',
	'publisher',
}
# A subset of the fields from BIBTEX_TITLECASE_TAGS whose values are
# rewritten in sentence case when converted into text (if so requested
# at invocation). Values of all other fields in BIBTEX_TITLECASE_TAGS
# are rewritten in title case, still.
BIBTEX_SENTENCECASE_TAGS = {
	'title',
}

# The nonstandard BibTeX fields whose values are formatted in LaTeX.
BIBTEX_EXTRA_TEX_TAGS = {
	'abstract',
}

# The BibTeX fields to be omitted from the output when generating
# a snippet for a separate entry.
BIBTEX_SNIPPET_IGNORE_TAGS = {
	'abstract',
}

# The BibTeX fields whose values are not to undergo the expansion of
# @string{} variables when generating a snippet for a separate entry.
BIBTEX_SNIPPET_KEEP_VARS_TAGS = {
	'month',
}

# The BibTeX fields whose values are to be treated as LaTeX code.
BIBTEX_TEX_TAGS = set().union(
	BIBTEX_STANDARD_TAGS,
	BIBTEX_EXTRA_TEX_TAGS,
)

assert BIBTEX_NAMELIST_TAGS.issubset(BIBTEX_STANDARD_TAGS)
assert BIBTEX_TITLECASE_TAGS.issubset(BIBTEX_STANDARD_TAGS)
assert BIBTEX_SENTENCECASE_TAGS.issubset(BIBTEX_TITLECASE_TAGS)
assert BIBTEX_EXTRA_TEX_TAGS.isdisjoint(BIBTEX_STANDARD_TAGS)
assert BIBTEX_SNIPPET_IGNORE_TAGS.isdisjoint(BIBTEX_STANDARD_TAGS)
assert BIBTEX_SNIPPET_KEEP_VARS_TAGS.isdisjoint(BIBTEX_SNIPPET_IGNORE_TAGS)

class CaseChange(enum.Enum):
	TITLE = 'title'
	SENTENCE = 'sentence'

	def __str__(self):
		return self.value

class BibTexWriter(bibtexparser.bwriter.BibTexWriter):
	def __init__(self):
		super().__init__()
		self.indent = '  '
		self.add_trailing_comma = True
		self.display_order = BIBTEX_STANDARD_TAGS
		self.order_entries_by = None

class YAMLDumper(yaml.Dumper):
	pass

def yaml_represent_dict(dumper, dict):
	tag = yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG
	return dumper.represent_mapping(tag, dict.items())

YAMLDumper.add_representer(OrderedDict, yaml_represent_dict)

def clean_ws(str):
	return clean_ws.WSPACE_RE.sub(' ', str).strip()

clean_ws.WSPACE_RE = re.compile(r'\s+')

def parse_tex(str):
	return latexwalker.LatexWalker(str).get_latex_nodes()[0]

def render_tex(tex_nodes):
	return latex2text.LatexNodes2Text(
		strict_latex_spaces=True,
	).nodelist_to_text(tex_nodes)

def detexify(str):
	text = render_tex(parse_tex(str))
	# Keep paragraphs separated to support fields like 'abstract',
	# and clean whitespace within each paragraph separately.
	pars = detexify.BLANK_LINE_RE.split(text.strip())
	return detexify.PAR_SEP.join(clean_ws(p) for p in pars)

detexify.BLANK_LINE_RE = re.compile(r'\n\s*\n')
detexify.PAR_SEP = '\n\n'

def title_cased(str):
	return titlecase.titlecase(str)

def sentence_cased(str):
	return titlecase.SUBPHRASE.sub(lambda m: m[1] + m[2].capitalize(), str.capitalize())

def title_text(tex_str, title_case=True):
	# Reserve places for the protected chunks, change the case in the
	# unprotected chunks conjointly, and then replace the placeholders
	# with the contents of the protected chunks via str.format().
	fmt_str = ''
	groups = []
	for node in parse_tex(tex_str):
		node_text = render_tex([node])
		if node_text and isinstance(node, latexwalker.LatexGroupNode):
			groups.append(node_text)
			fmt_str += '{}'
		else:
			fmt_str += node_text.replace('{', '{{').replace('}', '}}')

	case_transform = title_cased if title_case else sentence_cased
	# The clean_ws() call before case transformation is due to leading
	# whitespace affecting capitalization in titlecase.titlecase().
	return clean_ws(case_transform(clean_ws(fmt_str)).format(*groups))

def format_title(tag, tex_str, case_change):
	if case_change == CaseChange.TITLE:
		return title_text(tex_str, True)
	if case_change == CaseChange.SENTENCE:
		return title_text(tex_str, tag not in BIBTEX_SENTENCECASE_TAGS)
	return detexify(tex_str)

def format_bibtex(bib_entry):
	db = bibtexparser.bibdatabase.BibDatabase()
	db.entries = [{
		tag: val if tag in BIBTEX_SNIPPET_KEEP_VARS_TAGS else bib_expr_as_text(val)
		for tag, val in bib_entry.items()
		if tag not in BIBTEX_SNIPPET_IGNORE_TAGS
	}]
	return BibTexWriter().write(db).rstrip('\n')

def break_names(tag, tex_str, case_change):
	names = ['']
	for node in parse_tex(tex_str):
		if isinstance(node, latexwalker.LatexCharsNode):
			first, *rest = break_names.NAME_SEP_RE.split(node.chars)
			names[-1] += first
			names.extend(rest)
		else:
			names[-1] += node.latex_verbatim()

	profiles = []
	has_others_kw = False
	for name in names:
		if clean_ws(name).lower() == break_names.OTHERS_KEYWORD:
			has_others_kw = True
			continue
		parts = bibtexparser.customization.splitname(name, strict_mode=False)
		if not any(parts.get(k) for k in ('first', 'von', 'jr')):
			corp_title = ' '.join(parts.get('last', ()))
			profile = {'last': format_title(tag, corp_title, case_change)}
		else:
			profile = {
				'first': parts['first'][:1],
				'middle': parts['first'][1:],
				'last': parts['von'] + parts['last'],
				'lineage': parts['jr'],
			}
			profile = {k: detexify(' '.join(v)) for k, v in profile.items() if v}
		profiles.append(profile)
	if has_others_kw:
		profiles.append({'last': break_names.OTHERS_KEYWORD})
	return profiles

break_names.NAME_SEP_RE = re.compile(r'\sand\s', re.I)
break_names.OTHERS_KEYWORD = 'others'

def make_record(bib_entry, include_bibtex, case_change):
	record = {
		'id': bib_entry['ID'],
		'kind': bib_entry['ENTRYTYPE'],
	}
	if include_bibtex:
		record['bibtex'] = format_bibtex(bib_entry)
	for tag in bib_entry:
		value = bib_expr_as_text(bib_entry[tag])
		if tag in BIBTEX_NAMELIST_TAGS:
			record[tag] = break_names(tag, value, case_change)
		elif tag in BIBTEX_TITLECASE_TAGS:
			record[tag] = format_title(tag, value, case_change)
		elif tag in BIBTEX_TEX_TAGS:
			record[tag] = detexify(value)
		elif tag not in ('ID', 'ENTRYTYPE'):
			record[tag] = value
	return record

def record_date_str(record):
	# The BibLaTeX date field is already in ISO 8601 format.
	date_str = record.get('date', '')
	if date_str:
		return date_str

	try:
		date_str += '{:04d}'.format(int(record['year']))

		match = record_date_str.MONTH_PREFIX_RE.search(record['month'])
		month_prefix = match.group().lower()
		month_num = record_date_str.MONTH_PREFIXES.index(month_prefix)
		date_str += '-{:02d}'.format(month_num)

		date_str += '-{:02d}'.format(int(record['day']))
	except:
		pass  # Use whatever portion has been built so far.
	return date_str

record_date_str.MONTH_PREFIXES = (
	None,
	'jan', 'feb', 'mar', 'apr',
	'may', 'jun', 'jul', 'aug',
	'sep', 'oct', 'nov', 'dec',
)
record_date_str.MONTH_PREFIX_RE = re.compile(
	r'\b({})'.format(
		'|'.join(re.escape(p) for p in record_date_str.MONTH_PREFIXES if p),
	),
	re.I,
)

def load_bibtex(file):
	return bibtexparser.bparser.BibTexParser(
		common_strings=True,
		homogenize_fields=True,
		ignore_nonstandard_types=False,
		interpolate_strings=False,
	).parse_file(file, partial=True)

def save_yaml(records, file, Dumper=yaml.Dumper):
	yaml.dump(
		{'references': records},
		file,
		Dumper,
		allow_unicode=True,
		default_flow_style=False,
		encoding='utf-8',
		width=float('inf'),
	)

def save_bibtex(bib_db, file, id_sort_map=None, overwrite=False):
	if id_sort_map:
		bib_db.entries.sort(key=lambda e: id_sort_map.get(e['ID']))
	text = BibTexWriter().write(bib_db).rstrip('\n')
	if overwrite:
		file.seek(0)
		file.truncate()
	file.write(text)
	file.write('\n')

def convert_bibtex_file(
	bib_file,
	yaml_file,
	include_bibtex=False,
	case_change=None,
	reformat_source=True,
	YAMLDumper=YAMLDumper,
):
	bib_db = load_bibtex(bib_file)
	records = [make_record(e, include_bibtex, case_change) for e in bib_db.entries]

	# The order of records in the output YAML dictionary
	# is irrelevant but convenient for human readability.
	records.sort(key=record_date_str, reverse=True)
	records = OrderedDict((r.pop('id'), r) for r in records)
	save_yaml(records, yaml_file, Dumper=YAMLDumper)

	if reformat_source and bib_file.writable():
		id_ord = {id: n for n, id in enumerate(records)}
		save_bibtex(bib_db, bib_file, id_sort_map=id_ord, overwrite=True)

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument(
		'bib_file',
		metavar='bib-file',
		type=argparse.FileType('r+'),
		default=sys.stdin,
		help='input BibTeX file to parse',
	)
	parser.add_argument(
		'yaml_file',
		metavar='yaml-file',
		nargs='?',
		type=argparse.FileType('w'),
		default=sys.stdout,
		help='output YAML file to write',
	)
	parser.add_argument(
		'-b',
		'--include-bibtex',
		action='store_true',
		default=False,
		help='save BibTeX source snippets in the output records',
	)
	parser.add_argument(
		'-c',
		'--change-case',
		type=CaseChange,
		choices=list(CaseChange),
		help='normalize word capitalization in title-like fields',
	)
	parser.add_argument(
		'-f',
		'--reformat-source',
		action='store_true',
		default=False,
		help='rewrite the input BibTeX file in canonical formatting',
	)
	return parser.parse_args()

if __name__ == '__main__':
	args = parse_args()
	with args.bib_file, args.yaml_file:
		convert_bibtex_file(
			args.bib_file,
			args.yaml_file,
			include_bibtex=args.include_bibtex,
			case_change=args.change_case,
			reformat_source=args.reformat_source,
		)
